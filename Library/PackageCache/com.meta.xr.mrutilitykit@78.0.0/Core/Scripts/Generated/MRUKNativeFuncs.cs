/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// @generated by `buck2 run //arvr/projects/mixedreality/libraries/mrutilitykit:build_and_deploy unity`

using System;
using System.Runtime.InteropServices;
using UnityEngine;

namespace Meta.XR.MRUtilityKit
{
    internal static unsafe class MRUKNativeFuncs
    {
        public enum MrukSceneModel
        {
            V2FallbackV1 = 0,
            V1 = 1,
            V2 = 2,
        };

        public enum MrukLogLevel
        {
            Debug = 0,
            Info = 1,
            Warn = 2,
            Error = 3,
        };

        public enum MrukResult
        {
            Success = 0,
            ErrorInvalidArgs = 1,
            ErrorUnknown = 2,
            ErrorInternal = 3,
            ErrorDiscoveryOngoing = 4,
            ErrorInvalidJson = 5,
            ErrorNoRoomsFound = 6,
            ErrorInsufficientResources = 7,
            ErrorStorageAtCapacity = 8,
            ErrorInsufficientView = 9,
            ErrorPermissionInsufficient = 10,
            ErrorRateLimited = 11,
            ErrorTooDark = 12,
            ErrorTooBright = 13,
        };

        public enum MrukSurfaceType
        {
            None = 0,
            Plane = 1,
            Volume = 2,
            Mesh = 4,
            All = 7,
        };

        public enum MrukLabel
        {
            Floor = 1,
            Ceiling = 2,
            WallFace = 4,
            Table = 8,
            Couch = 16,
            DoorFrame = 32,
            WindowFrame = 64,
            Other = 128,
            Storage = 256,
            Bed = 512,
            Screen = 1024,
            Lamp = 2048,
            Plant = 4096,
            WallArt = 8192,
            SceneMesh = 16384,
            InvisibleWallFace = 32768,
            Unknown = 131072,
            InnerWallFace = 262144,
            Tabletop = 524288,
            SittingArea = 1048576,
            SleepingArea = 2097152,
            StorageTop = 4194304,
        };

        public enum MrukEnvironmentRaycastStatus
        {
            Hit = 1,
            NoHit = 2,
            HitPointOccluded = 3,
            HitPointOutsideFov = 4,
            RayOccluded = 5,
            InvalidOrientation = 6,
            Max = 2147483647,
        };

        public delegate void LogPrinter(MrukLogLevel logLevel, char* message, uint length);

        public delegate void MrukOnPreRoomAnchorAdded(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnRoomAnchorAdded(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnRoomAnchorUpdated(ref MrukRoomAnchor roomAnchor, ref Guid oldRoomAnchorUuid, [MarshalAs(UnmanagedType.U1)] bool significantChange, IntPtr userContext);

        public delegate void MrukOnRoomAnchorRemoved(ref MrukRoomAnchor roomAnchor, IntPtr userContext);

        public delegate void MrukOnSceneAnchorAdded(ref MrukSceneAnchor sceneAnchor, IntPtr userContext);

        public delegate void MrukOnSceneAnchorUpdated(ref MrukSceneAnchor sceneAnchor, [MarshalAs(UnmanagedType.U1)] bool significantChange, IntPtr userContext);

        public delegate void MrukOnSceneAnchorRemoved(ref MrukSceneAnchor sceneAnchor, IntPtr userContext);

        public delegate void MrukOnDiscoveryFinished(MrukResult result, IntPtr userContext);

        public delegate void MrukOnEnvironmentRaycasterCreated(MrukResult result, IntPtr userContext);

        public delegate Pose TrackingSpacePoseGetter();

        public delegate void TrackingSpacePoseSetter(Pose pose);

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukLabelFilter
        {
            public uint surfaceType;
            public uint includedLabels;
            [MarshalAs(UnmanagedType.U1)] public bool includedLabelsSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPolygon2f
        {
            public Vector2[] points;
            public uint numPoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh2f
        {
            public Vector2* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukMesh3f
        {
            public Vector3* vertices;
            public uint numVertices;
            public uint* indices;
            public uint numIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukVolume
        {
            public Vector3 min;
            public Vector3 max;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukPlane
        {
            public float x;
            public float y;
            public float width;
            public float height;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukSceneAnchor
        {
            public ulong space;
            public Guid uuid;
            public Guid roomUuid;
            public Pose pose;
            public MrukVolume volume;
            public MrukPlane plane;
            public MrukLabel semanticLabel;
            public Vector2* planeBoundary;
            public uint* globalMeshIndices;
            public Vector3* globalMeshPositions;
            public uint planeBoundaryCount;
            public uint globalMeshIndicesCount;
            public uint globalMeshPositionsCount;
            [MarshalAs(UnmanagedType.U1)] public bool hasVolume;
            [MarshalAs(UnmanagedType.U1)] public bool hasPlane;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukRoomAnchor
        {
            public ulong space;
            public Guid uuid;
            public Pose pose;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukEventListener
        {
            public MrukOnPreRoomAnchorAdded onPreRoomAnchorAdded;
            public MrukOnRoomAnchorAdded onRoomAnchorAdded;
            public MrukOnRoomAnchorUpdated onRoomAnchorUpdated;
            public MrukOnRoomAnchorRemoved onRoomAnchorRemoved;
            public MrukOnSceneAnchorAdded onSceneAnchorAdded;
            public MrukOnSceneAnchorUpdated onSceneAnchorUpdated;
            public MrukOnSceneAnchorRemoved onSceneAnchorRemoved;
            public MrukOnDiscoveryFinished onDiscoveryFinished;
            public MrukOnEnvironmentRaycasterCreated onEnvironmentRaycasterCreated;
            public IntPtr userContext;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukHit
        {
            public Guid roomAnchorUuid;
            public Guid sceneAnchorUuid;
            public float hitDistance;
            public Vector3 hitPosition;
            public Vector3 hitNormal;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukSharedRoomsData
        {
            public Guid groupUuid;
            public Guid* roomUuids;
            public uint numRoomUuids;
            public Guid alignmentRoomUuid;
            public Pose roomWorldPoseOnHost;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct _MrukUuidAlignmentTest
        {
            public byte padding;
            public Guid uuid;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukEnvironmentRaycastHitPointGetInfo
        {
            public Vector3 startPoint;
            public Vector3 direction;
            public uint filterCount;
            public float maxDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MrukEnvironmentRaycastHitPoint
        {
            public MrukEnvironmentRaycastStatus status;
            public Vector3 point;
            public Quaternion orientation;
            public Vector3 normal;
        }


        /**
         * This allows the engine to intercept the logs from the shared library and print them using the
         * engine's logging system. Note that the log lines are NOT NULL terminated, and so you must take
         * into account the length and be careful not to read past it.
         */
        internal delegate void SetLogPrinterDelegate(LogPrinter printer);

        /**
         * Create the global anchor store with a external OpenXR instance and session.
         * This should only be called once on application startup.
         * Make sure to hook up the ContextOnOpenXrEvent() function as well.
         * If the context is not needed anymore it should be destroyed with ContextDestroy() to free
         * resources.
         */
        internal delegate MrukResult AnchorStoreCreateDelegate(ulong xrInstance, ulong xrSession, IntPtr xrInstanceProcAddrFunc, ulong baseSpace, string[] availableOpenXrExtensions, uint availableOpenXrExtensionsCount);
        internal delegate MrukResult AnchorStoreCreateWithoutOpenXrDelegate();

        /**
         * This should be called when the OpenXR instance is destroyed and it is no longer valid to attempt
         * to make any OpenXR calls. This can happen with Link when exiting play mode.
         */
        internal delegate void AnchorStoreShutdownOpenXrDelegate();

        /**
         * Destroy the global anchor store
         * This should only be called once on application shutdown.
         */
        internal delegate void AnchorStoreDestroyDelegate();

        /**
         * If the base space changes after initialization, this function should be called to update the
         * base space.
         */
        internal delegate void AnchorStoreSetBaseSpaceDelegate(ulong baseSpace);

        /**
         * Start anchor discovery in the anchor store
         */
        internal delegate MrukResult AnchorStoreStartDiscoveryDelegate([MarshalAs(UnmanagedType.U1)] bool shouldRemoveMissingRooms, MrukSceneModel sceneModel);

        /**
         * Start anchor query from shared group uuid in the anchor store
         */
        internal delegate MrukResult AnchorStoreStartQueryByLocalGroupDelegate(MrukSharedRoomsData sharedRoomsData, [MarshalAs(UnmanagedType.U1)] bool shouldRemoveMissingRooms, MrukSceneModel sceneModel);

        /**
         * Load the scene from a json string
         */
        internal delegate MrukResult AnchorStoreLoadSceneFromJsonDelegate(string jsonString, [MarshalAs(UnmanagedType.U1)] bool shouldRemoveMissingRooms, MrukSceneModel sceneModel);

        /**
         * Save the scene to a json string.
         * @return The serialized JSON string. This string must be freed with FreeAnchorStoreJson after use!
         */
        internal delegate char* AnchorStoreSaveSceneToJsonDelegate([MarshalAs(UnmanagedType.U1)] bool includeGlobalMesh, Guid[] roomUuids, uint numRoomUuids);

        /**
         * Free the json string returned by AnchorStoreSaveSceneToJson.
         * @param[in] jsonString The JSON string to free.
         */
        internal delegate void AnchorStoreFreeJsonDelegate(char* jsonString);

        /**
         * Given a prefabricated scene description, load it in the anchor store.
         */
        internal delegate MrukResult AnchorStoreLoadSceneFromPrefabDelegate(MrukRoomAnchor* roomAnchors, uint numRoomAnchors, MrukSceneAnchor* sceneAnchors, uint numSceneAnchors);

        /**
         * Clear and remove all rooms in the anchor store.
         */
        internal delegate void AnchorStoreClearRoomsDelegate();

        /**
         * Clear and remove the room that matches the given uuid.
         */
        internal delegate void AnchorStoreClearRoomDelegate(Guid roomUuid);

        /**
         * Allows to forward OpenXR events from the engine into the shared library
         */
        internal delegate void AnchorStoreOnOpenXrEventDelegate(IntPtr baseEventHeader);

        /**
         * Needs to be called every tick by the engine.
         */
        internal delegate void AnchorStoreTickDelegate(ulong nextPredictedDisplayTime);
        internal delegate void AnchorStoreRegisterEventListenerDelegate(MrukEventListener listener);

        /**
         * Cast a ray against all anchors in the room and return the first hit.
         * A maxDistance of <= 0 will return the first hit regardless of distance.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastRoomDelegate(Guid roomUuid, Vector3 origin, Vector3 direction, float maxDistance, MrukLabelFilter labelFilter, ref MrukHit outHit);

        /**
         * Cast a ray against all anchors in the room and return all hits along the ray.
         * A maxDistance of <= 0 will return the hits along the ray regardless of distance.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastRoomAllDelegate(Guid roomUuid, Vector3 origin, Vector3 direction, float maxDistance, MrukLabelFilter labelFilter, ref MrukHit outHits, ref uint outHitsCount);

        /**
         * Cast a ray against the anchor in the room and return the first hit.
         * A maxDistance of <= 0 will return the hits along the ray regardless of distance.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastAnchorDelegate(Guid sceneAnchorUuid, Vector3 origin, Vector3 direction, float maxDistance, uint surfaceTypes, ref MrukHit outHit);

        /**
         * Cast a ray against the anchor in the room and return all hits along the ray.
         * A maxDistance of <= 0 will return the hits along the ray regardless of distance.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreRaycastAnchorAllDelegate(Guid sceneAnchorUuid, Vector3 origin, Vector3 direction, float maxDistance, uint surfaceTypes, ref MrukHit outHits, ref uint outHitsCount);
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreIsDiscoveryRunningDelegate();

        /**
         * Get the world lock offset for a given room. This is the difference between the room's initial
         * pose when it was created and the current pose.
         */
        [return: MarshalAs(UnmanagedType.U1)]
        internal delegate bool AnchorStoreGetWorldLockOffsetDelegate(Guid roomUuid, ref Pose offset);

        /**
         * Add two vectors together. This is implemented as a test to ensure the native shared
         * library is working correctly.
         *
         * @param[in] a The first vector.
         * @param[in] b The second vector.
         * @return The sum of the two vectors.
         */
        internal delegate Vector3 AddVectorsDelegate(Vector3 a, Vector3 b);

        /**
         * Triangulate a polygon with holes, any winding order works. The first polyline defines the main
         * polygon. Following polylines define holes. This function will allocate memory for the vertices
         * and indices. You *MUST* call FreeMesh() when you are done with it or you will leak memory.
         *
         * @param[in] polygons The polygon to triangulate.
         * @param[in] numPolygons The number of polygons in the array.
         * @return mesh The triangulated mesh.
         */
        internal delegate MrukMesh2f TriangulatePolygonDelegate(MrukPolygon2f[] polygons, uint numPolygons);

        /**
         * Free the memory allocated by TriangulatePolygon.
         *
         * @param[in] mesh The mesh to free.
         */
        internal delegate void FreeMeshDelegate(ref MrukMesh2f mesh);

        /**
         * Compute the mesh segmentation for a given set of vertices, indices and segmentation points.
         * You *MUST* call FreeMeshSegmentation() on the meshSegments array when you are done with it or you
         * will leak memory.
         *
         * @param[in] vertices The mesh vertices.
         * @param[in] numVertices The number of vertices in the mesh.
         * @param[in] indices The mesh indices.
         * @param[in] numIndices The number of indices in the mesh.
         * @param[in] segmentationPoints The points that should be used to calculate the segments.
         * @param[in] numSegmentationPoints The number of segmentation points.
         * @param[in] reservedMin The minimum bounding box for the reserved segment.
         * @param[in] reservedMax The maximum bounding box for the reserved segment.
         * @param[out] meshSegments The resulting segments.
         * @param[out] numSegments The number of segments in the resulting array.
         * @param[out] reservedSegment The segment that is inside the reserved bounding box.
         */
        internal delegate MrukResult ComputeMeshSegmentationDelegate(Vector3[] vertices, uint numVertices, uint[] indices, uint numIndices, Vector3[] segmentationPoints, uint numSegmentationPoints, Vector3 reservedMin, Vector3 reservedMax, out MrukMesh3f* meshSegments, out uint numSegments, out MrukMesh3f reservedSegment);

        /**
         * Free the memory allocated by ComputeMeshSegmentation.
         *
         * @param[in] meshSegments The array of segments to free.
         * @param[in] numSegments The number of segments in the array.
         * @param[in] reservedSegment The reserved segment to free.
         */
        internal delegate void FreeMeshSegmentationDelegate(MrukMesh3f* meshSegments, uint numSegments, ref MrukMesh3f reservedSegment);

        /**
         * The is a test function purely to test the marshalling of Uuid from C# to C++. It ensures that the
         * packing between clang C++ and the C# definitions of MrukUuid are compatible.
         *
         * @param[in] packedUuid A uuid packed into a structure.
         * @return A copy of the uuid that was passed in the structure.
         */
        internal delegate Guid _TestUuidMarshallingDelegate(_MrukUuidAlignmentTest packedUuid);

        /**
         * Converts the given label to the matching MrukLabel.
         *
         * @param[in] label The label as string.
         * @return The converted MrukLabel.
         */
        internal delegate MrukLabel StringToMrukLabelDelegate(string label);

        /**
         * Creates the enviornment raycaster and fires the onEnvironmentRaycasterCreated event when the
         * creation is complete.
         */
        internal delegate void CreateEnvironmentRaycasterDelegate();

        /**
         * Destroys the enviornment raycaster.
         */
        internal delegate void DestroyEnvironmentRaycasterDelegate();

        /**
         * Performs an environment raycast.
         * Ensure that the environment raycaster is created before calling this function.
         * @param[in] info The raycast info.
         * @param[out] hitPoint The hit point.
         */
        internal delegate void PerformEnvironmentRaycastDelegate(ref MrukEnvironmentRaycastHitPointGetInfo info, ref MrukEnvironmentRaycastHitPoint hitPoint);
        internal delegate void SetTrackingSpacePoseGetterDelegate(TrackingSpacePoseGetter getter);
        internal delegate void SetTrackingSpacePoseSetterDelegate(TrackingSpacePoseSetter setter);

        internal static SetLogPrinterDelegate SetLogPrinter;
        internal static AnchorStoreCreateDelegate AnchorStoreCreate;
        internal static AnchorStoreCreateWithoutOpenXrDelegate AnchorStoreCreateWithoutOpenXr;
        internal static AnchorStoreShutdownOpenXrDelegate AnchorStoreShutdownOpenXr;
        internal static AnchorStoreDestroyDelegate AnchorStoreDestroy;
        internal static AnchorStoreSetBaseSpaceDelegate AnchorStoreSetBaseSpace;
        internal static AnchorStoreStartDiscoveryDelegate AnchorStoreStartDiscovery;
        internal static AnchorStoreStartQueryByLocalGroupDelegate AnchorStoreStartQueryByLocalGroup;
        internal static AnchorStoreLoadSceneFromJsonDelegate AnchorStoreLoadSceneFromJson;
        internal static AnchorStoreSaveSceneToJsonDelegate AnchorStoreSaveSceneToJson;
        internal static AnchorStoreFreeJsonDelegate AnchorStoreFreeJson;
        internal static AnchorStoreLoadSceneFromPrefabDelegate AnchorStoreLoadSceneFromPrefab;
        internal static AnchorStoreClearRoomsDelegate AnchorStoreClearRooms;
        internal static AnchorStoreClearRoomDelegate AnchorStoreClearRoom;
        internal static AnchorStoreOnOpenXrEventDelegate AnchorStoreOnOpenXrEvent;
        internal static AnchorStoreTickDelegate AnchorStoreTick;
        internal static AnchorStoreRegisterEventListenerDelegate AnchorStoreRegisterEventListener;
        internal static AnchorStoreRaycastRoomDelegate AnchorStoreRaycastRoom;
        internal static AnchorStoreRaycastRoomAllDelegate AnchorStoreRaycastRoomAll;
        internal static AnchorStoreRaycastAnchorDelegate AnchorStoreRaycastAnchor;
        internal static AnchorStoreRaycastAnchorAllDelegate AnchorStoreRaycastAnchorAll;
        internal static AnchorStoreIsDiscoveryRunningDelegate AnchorStoreIsDiscoveryRunning;
        internal static AnchorStoreGetWorldLockOffsetDelegate AnchorStoreGetWorldLockOffset;
        internal static AddVectorsDelegate AddVectors;
        internal static TriangulatePolygonDelegate TriangulatePolygon;
        internal static FreeMeshDelegate FreeMesh;
        internal static ComputeMeshSegmentationDelegate ComputeMeshSegmentation;
        internal static FreeMeshSegmentationDelegate FreeMeshSegmentation;
        internal static _TestUuidMarshallingDelegate _TestUuidMarshalling;
        internal static StringToMrukLabelDelegate StringToMrukLabel;
        internal static CreateEnvironmentRaycasterDelegate CreateEnvironmentRaycaster;
        internal static DestroyEnvironmentRaycasterDelegate DestroyEnvironmentRaycaster;
        internal static PerformEnvironmentRaycastDelegate PerformEnvironmentRaycast;
        internal static SetTrackingSpacePoseGetterDelegate SetTrackingSpacePoseGetter;
        internal static SetTrackingSpacePoseSetterDelegate SetTrackingSpacePoseSetter;

        internal static void LoadNativeFunctions()
        {
            SetLogPrinter = MRUKNative.LoadFunction<SetLogPrinterDelegate>("SetLogPrinter");
            AnchorStoreCreate = MRUKNative.LoadFunction<AnchorStoreCreateDelegate>("AnchorStoreCreate");
            AnchorStoreCreateWithoutOpenXr = MRUKNative.LoadFunction<AnchorStoreCreateWithoutOpenXrDelegate>("AnchorStoreCreateWithoutOpenXr");
            AnchorStoreShutdownOpenXr = MRUKNative.LoadFunction<AnchorStoreShutdownOpenXrDelegate>("AnchorStoreShutdownOpenXr");
            AnchorStoreDestroy = MRUKNative.LoadFunction<AnchorStoreDestroyDelegate>("AnchorStoreDestroy");
            AnchorStoreSetBaseSpace = MRUKNative.LoadFunction<AnchorStoreSetBaseSpaceDelegate>("AnchorStoreSetBaseSpace");
            AnchorStoreStartDiscovery = MRUKNative.LoadFunction<AnchorStoreStartDiscoveryDelegate>("AnchorStoreStartDiscovery");
            AnchorStoreStartQueryByLocalGroup = MRUKNative.LoadFunction<AnchorStoreStartQueryByLocalGroupDelegate>("AnchorStoreStartQueryByLocalGroup");
            AnchorStoreLoadSceneFromJson = MRUKNative.LoadFunction<AnchorStoreLoadSceneFromJsonDelegate>("AnchorStoreLoadSceneFromJson");
            AnchorStoreSaveSceneToJson = MRUKNative.LoadFunction<AnchorStoreSaveSceneToJsonDelegate>("AnchorStoreSaveSceneToJson");
            AnchorStoreFreeJson = MRUKNative.LoadFunction<AnchorStoreFreeJsonDelegate>("AnchorStoreFreeJson");
            AnchorStoreLoadSceneFromPrefab = MRUKNative.LoadFunction<AnchorStoreLoadSceneFromPrefabDelegate>("AnchorStoreLoadSceneFromPrefab");
            AnchorStoreClearRooms = MRUKNative.LoadFunction<AnchorStoreClearRoomsDelegate>("AnchorStoreClearRooms");
            AnchorStoreClearRoom = MRUKNative.LoadFunction<AnchorStoreClearRoomDelegate>("AnchorStoreClearRoom");
            AnchorStoreOnOpenXrEvent = MRUKNative.LoadFunction<AnchorStoreOnOpenXrEventDelegate>("AnchorStoreOnOpenXrEvent");
            AnchorStoreTick = MRUKNative.LoadFunction<AnchorStoreTickDelegate>("AnchorStoreTick");
            AnchorStoreRegisterEventListener = MRUKNative.LoadFunction<AnchorStoreRegisterEventListenerDelegate>("AnchorStoreRegisterEventListener");
            AnchorStoreRaycastRoom = MRUKNative.LoadFunction<AnchorStoreRaycastRoomDelegate>("AnchorStoreRaycastRoom");
            AnchorStoreRaycastRoomAll = MRUKNative.LoadFunction<AnchorStoreRaycastRoomAllDelegate>("AnchorStoreRaycastRoomAll");
            AnchorStoreRaycastAnchor = MRUKNative.LoadFunction<AnchorStoreRaycastAnchorDelegate>("AnchorStoreRaycastAnchor");
            AnchorStoreRaycastAnchorAll = MRUKNative.LoadFunction<AnchorStoreRaycastAnchorAllDelegate>("AnchorStoreRaycastAnchorAll");
            AnchorStoreIsDiscoveryRunning = MRUKNative.LoadFunction<AnchorStoreIsDiscoveryRunningDelegate>("AnchorStoreIsDiscoveryRunning");
            AnchorStoreGetWorldLockOffset = MRUKNative.LoadFunction<AnchorStoreGetWorldLockOffsetDelegate>("AnchorStoreGetWorldLockOffset");
            AddVectors = MRUKNative.LoadFunction<AddVectorsDelegate>("AddVectors");
            TriangulatePolygon = MRUKNative.LoadFunction<TriangulatePolygonDelegate>("TriangulatePolygon");
            FreeMesh = MRUKNative.LoadFunction<FreeMeshDelegate>("FreeMesh");
            ComputeMeshSegmentation = MRUKNative.LoadFunction<ComputeMeshSegmentationDelegate>("ComputeMeshSegmentation");
            FreeMeshSegmentation = MRUKNative.LoadFunction<FreeMeshSegmentationDelegate>("FreeMeshSegmentation");
            _TestUuidMarshalling = MRUKNative.LoadFunction<_TestUuidMarshallingDelegate>("_TestUuidMarshalling");
            StringToMrukLabel = MRUKNative.LoadFunction<StringToMrukLabelDelegate>("StringToMrukLabel");
            CreateEnvironmentRaycaster = MRUKNative.LoadFunction<CreateEnvironmentRaycasterDelegate>("CreateEnvironmentRaycaster");
            DestroyEnvironmentRaycaster = MRUKNative.LoadFunction<DestroyEnvironmentRaycasterDelegate>("DestroyEnvironmentRaycaster");
            PerformEnvironmentRaycast = MRUKNative.LoadFunction<PerformEnvironmentRaycastDelegate>("PerformEnvironmentRaycast");
            SetTrackingSpacePoseGetter = MRUKNative.LoadFunction<SetTrackingSpacePoseGetterDelegate>("SetTrackingSpacePoseGetter");
            SetTrackingSpacePoseSetter = MRUKNative.LoadFunction<SetTrackingSpacePoseSetterDelegate>("SetTrackingSpacePoseSetter");
        }

        internal static void UnloadNativeFunctions()
        {
            SetLogPrinter = null;
            AnchorStoreCreate = null;
            AnchorStoreCreateWithoutOpenXr = null;
            AnchorStoreShutdownOpenXr = null;
            AnchorStoreDestroy = null;
            AnchorStoreSetBaseSpace = null;
            AnchorStoreStartDiscovery = null;
            AnchorStoreStartQueryByLocalGroup = null;
            AnchorStoreLoadSceneFromJson = null;
            AnchorStoreSaveSceneToJson = null;
            AnchorStoreFreeJson = null;
            AnchorStoreLoadSceneFromPrefab = null;
            AnchorStoreClearRooms = null;
            AnchorStoreClearRoom = null;
            AnchorStoreOnOpenXrEvent = null;
            AnchorStoreTick = null;
            AnchorStoreRegisterEventListener = null;
            AnchorStoreRaycastRoom = null;
            AnchorStoreRaycastRoomAll = null;
            AnchorStoreRaycastAnchor = null;
            AnchorStoreRaycastAnchorAll = null;
            AnchorStoreIsDiscoveryRunning = null;
            AnchorStoreGetWorldLockOffset = null;
            AddVectors = null;
            TriangulatePolygon = null;
            FreeMesh = null;
            ComputeMeshSegmentation = null;
            FreeMeshSegmentation = null;
            _TestUuidMarshalling = null;
            StringToMrukLabel = null;
            CreateEnvironmentRaycaster = null;
            DestroyEnvironmentRaycaster = null;
            PerformEnvironmentRaycast = null;
            SetTrackingSpacePoseGetter = null;
            SetTrackingSpacePoseSetter = null;
        }

    }
}
