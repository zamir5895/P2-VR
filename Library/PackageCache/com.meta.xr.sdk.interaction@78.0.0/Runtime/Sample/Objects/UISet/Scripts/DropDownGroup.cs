/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

namespace Oculus.Interaction.Samples
{
    public class DropDownGroup : MonoBehaviour
    {
        /// <summary>
        /// ToggleGroup for all the options in the dropdown.
        /// It will be enforced to dissallow off-state and be referenced in all toggles.
        /// If none provided it will be searched in the hierarchy under this component.
        /// </summary>
        [SerializeField]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        [Tooltip("ToggleGroup for all the options in the dropdown. " +
            "It will be enforced to dissallow off-state " +
            "and be referenced in all toggles. " +
            "If none provided it will be searched in the hierarchy under this component.")]
        private ToggleGroup _toggleGroup;

        /// <summary>
        /// The toggle for the header.
        /// It will be closed automatically when an option is selected.
        /// </summary>
        [SerializeField, Optional]
        [Tooltip("The toggle for the header" +
            "It will be closed automatically when an option is selected.")]
        private Toggle _headerToggle;

        /// <summary>
        /// Toggles for all options in the dropdown.
        /// If none provided it will be searched in the hierarchy under the toggle group.
        /// </summary>
        [SerializeField]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        [Tooltip("Toggles for all options in the dropdown, " +
            "if none provided it will be searched in the hierarchy under the toggle group.")]
        private Toggle[] _toggles;

        /// <summary>
        /// Event triggered everytime the selection changes
        /// </summary>
        public UnityEvent<int> WhenSelectionChanged;

        [Header("Header visuals")]

        [SerializeField, Optional(OptionalAttribute.Flag.DontHide)]
        [Tooltip("Title label in the header")]
        private TextMeshProUGUI _title;
        /// <summary>
        /// Title label in the header
        /// </summary>
        public TextMeshProUGUI Title
        {
            get => _title;
            set => _title = value;
        }

        [SerializeField]
        [ConditionalHide(nameof(_title), null, ConditionalHideAttribute.DisplayMode.HideIfTrue)]
        [Tooltip("Name of the Gameobject holding the title in each option.")]
        private string _titleName = "Title";
        /// <summary>
        /// Name of the Gameobject holding the title in each option.
        /// </summary>
        public string TitleName
        {
            get => _titleName;
            set => _titleName = value;
        }

        [SerializeField, Optional(OptionalAttribute.Flag.DontHide)]
        [Tooltip("Subtitle label in the header.")]
        private TextMeshProUGUI _subtitle;
        /// <summary>
        /// Subtitle label in the header.
        /// </summary>
        public TextMeshProUGUI Subtitle
        {
            get => _subtitle;
            set => _subtitle = value;
        }

        [SerializeField]
        [ConditionalHide(nameof(_subtitle), null, ConditionalHideAttribute.DisplayMode.HideIfTrue)]
        [Tooltip("Name of the Gameobject holding the subtitle in each option.")]
        private string _subtitleName = "Subtitle";
        /// <summary>
        /// Name of the Gameobject holding the subtitle in each option.
        /// </summary>
        public string SubtitleName
        {
            get => _subtitleName;
            set => _subtitleName = value;
        }

        [SerializeField, Optional(OptionalAttribute.Flag.DontHide)]
        [Tooltip("Image for the icon in the header.")]
        private Image _icon;
        /// <summary>
        /// Image for the icon in the header.
        /// </summary>
        public Image Icon
        {
            get => _icon;
            set => _icon = value;
        }

        [SerializeField]
        [ConditionalHide(nameof(_icon), null, ConditionalHideAttribute.DisplayMode.HideIfTrue)]
        [Tooltip("Name of the Gameobject holding the icon in each option.")]
        private string _iconName = "Icon";
        /// <summary>
        /// Name of the Gameobject holding the icon in each option.
        /// </summary>
        public string IconName
        {
            get => _iconName;
            set => _iconName = value;
        }

        private int _selectedIndex = -1;
        /// <summary>
        /// The Option currently selected. -1 if none is selected
        /// </summary>
        public int SelectedIndex
        {
            get
            {
                return _selectedIndex;
            }
            private set
            {
                if (_selectedIndex != value)
                {
                    _selectedIndex = value;
                    WhenSelectionChanged.Invoke(_selectedIndex);
                }
            }
        }

        /// <summary>
        /// The Toggle for the currently selected option. Null if none is selected
        /// </summary>
        public Toggle SelectedToggle
        {
            get
            {
                return _selectedIndex >= 0 ? _toggles[_selectedIndex] : null;
            }
        }

        private UnityAction<bool>[] _toggleActions;
        protected bool _started;

        #region Editor Events

        protected virtual void Reset()
        {
            _toggleGroup = this.GetComponentInChildren<ToggleGroup>();
        }

        #endregion

        protected virtual void Start()
        {
            this.BeginStart(ref _started);

            if (_toggleGroup == null)
            {
                _toggleGroup = this.GetComponentInChildren<ToggleGroup>();
            }
            this.AssertField(_toggleGroup, nameof(_toggleGroup));

            if (_toggles == null
                || _toggles.Length == 0)
            {
                Toggle[] subToggles = _toggleGroup.transform.GetComponentsInChildren<Toggle>();
                _toggles = subToggles.Where(toggle => toggle.group == _toggleGroup).ToArray();
            }

            this.AssertCollectionField(_toggles, nameof(_toggles));

            InitializeToggleActions();
            InitializeToggleGroup();

            this.EndStart(ref _started);

        }

        protected virtual void OnEnable()
        {
            if (_started)
            {
                for (int i = 0; i < _toggles.Length; i++)
                {
                    _toggles[i].onValueChanged.AddListener(_toggleActions[i]);
                }

                ForceUpdateSelectedIndex();
            }
        }

        protected virtual void OnDisable()
        {
            if (_started)
            {
                for (int i = 0; i < _toggles.Length; i++)
                {
                    _toggles[i].onValueChanged.RemoveListener(_toggleActions[i]);
                }
            }
        }

        private void ForceUpdateSelectedIndex()
        {
            for (int i = 0; i < _toggles.Length; i++)
            {
                if (_toggles[i].isOn)
                {
                    SelectedIndex = i;
                    break;
                }
            }

            HandleToggleChanged(true, SelectedIndex);
        }

        private void InitializeToggleActions()
        {
            _toggleActions = new UnityAction<bool>[_toggles.Length];
            for (int i = 0; i < _toggleActions.Length; i++)
            {
                int toggleIndex = i;
                _toggleActions[i] = (isOn) =>
                {
                    HandleToggleChanged(isOn, toggleIndex);
                    if (isOn)
                    {
                        _headerToggle.isOn = false;
                    }
                };
            }
        }

        private void InitializeToggleGroup()
        {
            _toggleGroup.allowSwitchOff = false;
            foreach (Toggle toggle in _toggles)
            {
                if (toggle.group == _toggleGroup)
                {
                    continue;
                }
                if (toggle.group != null)
                {
                    toggle.group.UnregisterToggle(toggle);
                }
                toggle.group = _toggleGroup;
                _toggleGroup.RegisterToggle(toggle);
            }

            _toggleGroup.EnsureValidState();
        }

        private void HandleToggleChanged(bool isOn, int index)
        {
            if (isOn && index >= 0)
            {
                Toggle changedToggle = _toggles[index];

                if (_title != null
                    && _title.gameObject.activeSelf
                    && TryGetChildComponent(changedToggle.transform, _titleName, out TextMeshProUGUI title))
                {
                    _title.text = title.text;
                }

                if (_subtitle != null
                    && _subtitle.gameObject.activeSelf
                    && TryGetChildComponent(changedToggle.transform, _subtitleName, out TextMeshProUGUI subtitle))
                {
                    _subtitle.text = subtitle.text;
                }

                if (_icon != null
                    && _icon.gameObject.activeSelf
                    && TryGetChildComponent(changedToggle.transform, _iconName, out Image image))
                {
                    _icon.sprite = image.sprite;
                }

                SelectedIndex = index;
            }
        }

        private static bool TryGetChildComponent<TComponent>(Transform root, string childName, out TComponent component)
            where TComponent : Component
        {
            Transform transform = root.FindChildRecursive(childName);
            if (transform != null
                && transform.gameObject.activeSelf
                && transform.TryGetComponent(out component))
            {
                return true;
            }

            component = default;
            return false;
        }

        #region Inject

        public void InjectAllDropDownShowSelectedItem(Toggle[] toggles, ToggleGroup toggleGroup)
        {
            InjectToggles(toggles);
            InjectToggleGroup(toggleGroup);
        }

        public void InjectToggles(Toggle[] toggles)
        {
            _toggles = toggles;
        }

        public void InjectToggleGroup(ToggleGroup toggleGroup)
        {
            _toggleGroup = toggleGroup;
        }

        #endregion
    }
}
