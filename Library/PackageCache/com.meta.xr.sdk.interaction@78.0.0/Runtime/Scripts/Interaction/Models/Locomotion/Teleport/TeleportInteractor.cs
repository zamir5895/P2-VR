/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Oculus.Interaction.Input;
using Oculus.Interaction.PoseDetection;
using System;
using UnityEngine;
using InteractableSet = Oculus.Interaction.InteractableRegistry<Oculus.Interaction.Locomotion.TeleportInteractor, Oculus.Interaction.Locomotion.TeleportInteractable>.InteractableSet;

namespace Oculus.Interaction.Locomotion
{
    /// <summary>
    /// TeleportInteractor uses a provided <see cref="IPolyline"/> teleport arc and an external <see cref="ISelector"/> to
    /// find the best <see cref="TeleportInteractable"/> and emit the event requesting a teleport to it. By itself it does
    /// not define the shape of the arc or even moves the player, instead it is the core class that brings these pieces together.
    /// </summary>
    public class TeleportInteractor : Interactor<TeleportInteractor, TeleportInteractable>, ILocomotionEventBroadcaster
    {
        /// <summary>
        /// A selector indicating when the Interactor should select or unselect the best available interactable.
        /// </summary>
        [SerializeField, Interface(typeof(ISelector))]
        [Tooltip("A selector indicating when the Interactor should" +
            "Select or Unselect the best available interactable." +
            "Typically when using controllers this selector is driven by the joystick value," +
            "and for hands it is driven by the index pinch value.")]
        private UnityEngine.Object _selector;

        [SerializeField, Interface(typeof(IPolyline))]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        [Tooltip("Specifies the shape of the arc used for detecting available interactables." +
            "If none is provided TeleportArcGravity will be used.")]
        private UnityEngine.Object _teleportArc;
        /// <summary>
        ///  Specifies the shape of the arc used for detecting available interactables.
        ///  If none is provided, <see cref="TeleportArcGravity"/> will be used as a default.
        /// </summary>
        public IPolyline TeleportArc { get; private set; }

        [SerializeField, Optional(OptionalAttribute.Flag.Obsolete)]
        [Tooltip("(Meters, World) The threshold below which distances to a interactable " +
                 "are treated as equal for the purposes of ranking.")]
        private float _equalDistanceThreshold = 0.1f;
        /// <summary>
        /// (Meters, World) The threshold below which distances to an interactable are treated as equal for the purposes of ranking.
        /// </summary>
        [Obsolete("This property is obsolete, create a " +
            nameof(ComputeCandidateDelegate) + " if you need custom candidate computing logic")]
        public float EqualDistanceThreshold
        {
            get
            {
                return _equalDistanceThreshold;
            }
            set
            {
                _equalDistanceThreshold = value;
            }
        }

        [SerializeField, Optional(OptionalAttribute.Flag.Obsolete), Interface(typeof(IHmd))]
        [Tooltip("When provided, the Interactor will perform an extra check to ensure" +
            "nothing is blocking the line between the Hmd and the teleport origin")]
        private UnityEngine.Object _hmd;
        /// <summary>
        /// When provided, the interactor will perform an extra check to ensure nothing
        /// is blocking the line between the <see cref="IHmd"/> (head of the player) and the teleport
        /// origin (hand), making it impossible to teleport if the user is placing their
        /// hands behind a virtual wall.
        /// </summary>
        [Obsolete("This property is obsolete, create a " +
            nameof(ComputeCandidateDelegate) + " if you need custom candidate computing logic")]
        private IHmd Hmd { get; set; }

        /// <summary>
        /// The starting point of the teleport arc.
        /// </summary>
        /// <remarks>
        /// This pose is calculated from the <see cref="IPolyline"/> provided as the <see cref="TeleportArc"/>.
        /// </remarks>
        public Pose ArcOrigin
        {
            get
            {
                Vector3 start = TeleportArc.PointAtIndex(0);
                Vector3 next = TeleportArc.PointAtIndex(1);
                return new Pose(start, Quaternion.LookRotation(next - start));
            }
        }

        private TeleportHit _arcEnd;
        /// <summary>
        /// The most recent calculated endpoint of the teleport arc. This property can change and/or linger on old
        /// values with unspecified timing depending on the internal state of the TeleportInteractor, so it should
        /// not be relied on for anything other than rendering visualizations.
        /// </summary>
        public TeleportHit ArcEnd => _arcEnd;

        /// <summary>
        /// The location to teleport to. If the interactor has an interactable, then that's the teleport location.
        /// Otherwise it just projects the end of the arc onto the ground and uses that as the target.
        /// </summary>
        public Pose TeleportTarget
        {
            get
            {
                Vector3 forward = Vector3.ProjectOnPlane(ArcOrigin.forward, _arcEnd.Normal);
                Quaternion rotation = Quaternion.LookRotation(forward, _arcEnd.Normal);
                Pose pose = new Pose(_arcEnd.Point, rotation);
                if (HasInteractable)
                {
                    return Interactable.TargetPose(pose);
                }
                return pose;
            }
        }

        private Action<LocomotionEvent> _whenLocomotionPerformed = delegate { };
        /// <summary>
        /// Implementation of <see cref="ILocomotionEventBroadcaster.WhenLocomotionPerformed"/>; for details, please refer to the related
        /// documentation provided for that interface.
        /// </summary>
        public event Action<LocomotionEvent> WhenLocomotionPerformed
        {
            add
            {
                _whenLocomotionPerformed += value;
            }
            remove
            {
                _whenLocomotionPerformed -= value;
            }
        }

        /// <summary>
        /// Delegate to accept or reject the selection of teleport destination.
        /// </summary>
        /// <param name="interactable">The interactable the interactor wants to teleport to.</param>
        /// <param name="destination">The final Pose the interactor wants to move to.</param>
        /// <returns>True if the destination is accepted, false if rejected.</returns>
        public delegate bool AcceptDestinationComputer(TeleportInteractable interactable, Pose destination);
        private AcceptDestinationComputer _acceptDestination;
        /// <summary>
        /// This optional delegate method offers one chance to accept or reject a valid target destination.
        /// It will be executed upon the current Interactable and desired target Pose in order
        /// to allow selection.
        ///
        /// Return true to allow Selection, false to disallow selection.
        /// When it is not set, it always allows to select valid interactables.
        /// </summary>
        public AcceptDestinationComputer AcceptDestination
        {
            get
            {
                return _acceptDestination;
            }
            set
            {
                _acceptDestination = value;
            }
        }

        public delegate int ComputeCandidateTiebreakerDelegate(
            TeleportInteractable a, TeleportInteractable b);

        /// <summary>
        /// Delegate method used for calculating the best available interactable
        /// to teleport to. Implement this delegate to create custom behaviors
        /// for <see cref="Interactor{TInteractor, TInteractable}.ComputeCandidate"/>.
        /// </summary>
        /// <param name="TeleportArc">The serie of segments used to query the interactables.</param>
        /// <param name="interactables">The list of available interactors whitin range of the arc</param>
        /// <param name="tiebreaker">Method to break the tie when two interactables get the same result,
        /// note that this can be modified externally via Interactor.CandidateTiebreaker</param>
        /// <param name="hitPose">The information about where the best candidate was hit</param>
        /// <returns>The best candidate found</returns>
        public delegate TeleportInteractable ComputeCandidateDelegate(
            IPolyline TeleportArc,
            in InteractableSet interactables,
            ComputeCandidateTiebreakerDelegate tiebreaker,
            out TeleportHit hitPose);

        private ComputeCandidateDelegate _computeCandidate;
        private ComputeCandidateTiebreakerDelegate _computeCandidateTiebreaker;

        protected override void Awake()
        {
            base.Awake();
            if (TeleportArc == null)
            {
                TeleportArc = _teleportArc as IPolyline;
            }
            if (Selector == null)
            {
                Selector = _selector as ISelector;
            }
#pragma warning disable CS0618 // Type or member is obsolete
            Hmd = _hmd as IHmd;
#pragma warning restore CS0618 // Type or member is obsolete
            _nativeId = 0x4c6f636f6d6f7469;
            _computeCandidateTiebreaker = ComputeCandidateTiebreaker;
        }

        protected override void Start()
        {
            this.BeginStart(ref _started, () => base.Start());

            this.AssertField(Selector, nameof(Selector));

            if (TeleportArc == null)
            {
                var arc = this.gameObject.AddComponent<TeleportArcGravity>();
                InjectOptionalTeleportArc(arc);
            }

            if (_computeCandidate == null)
            {
                GameObject gameObject = new GameObject("Default CandidateComputer");
                var defaultCandidateComputer = gameObject.AddComponent<TeleportCandidateComputer>();
                defaultCandidateComputer.EqualDistanceThreshold = _equalDistanceThreshold;
#pragma warning disable CS0618 // Type or member is obsolete
                if (Hmd != null)
                {
                    HmdOffset hmdOffset = gameObject.AddComponent<HmdOffset>();
                    hmdOffset.InjectAllHmdOffset(Hmd);
                    defaultCandidateComputer.BlockCheckOrigin = gameObject.transform;
                }
#pragma warning restore CS0618 // Type or member is obsolete
                _computeCandidate = defaultCandidateComputer.ComputeCandidate;
            }

            this.EndStart(ref _started);
        }

        /// <summary>
        /// Override of <see cref="Interactor{TInteractor, TInteractable}.CanSelect(TInteractable)"/>; for details, please refer to the related
        /// documentation provided for that method.
        /// </summary>
        public override bool CanSelect(TeleportInteractable interactable)
        {
            Pose origin = ArcOrigin;
            float maxSqrDistance = (TeleportArc.PointAtIndex(0) -
                TeleportArc.PointAtIndex(TeleportArc.PointsCount - 1)).sqrMagnitude;
            if (!interactable.IsInRange(origin, maxSqrDistance))
            {
                return false;
            }

            return base.CanSelect(interactable);
        }

        /// <summary>
        /// Checks whether the interactor current has a target <see cref="TeleportInteractable"/> to which it can legitimiately travel.
        /// </summary>
        /// <returns>True if there is a current target and that target can be teleported to, false otherwise</returns>
        public bool HasValidDestination()
        {
            Pose target = TeleportTarget;
            return Interactable != null
                && Interactable.AllowTeleport
                && (_acceptDestination == null || _acceptDestination(Interactable, target));
        }

        protected override void InteractableSelected(TeleportInteractable interactable)
        {
            base.InteractableSelected(interactable);

            Pose target = TeleportTarget;

            if (!HasValidDestination())
            {
                LocomotionEvent deniedLocomotionEvent = new LocomotionEvent(this.Identifier, target,
                    LocomotionEvent.TranslationType.None, LocomotionEvent.RotationType.None);
                _whenLocomotionPerformed.Invoke(deniedLocomotionEvent);
                return;
            }

            LocomotionEvent locomotionEvent = new LocomotionEvent(this.Identifier, target,
                interactable.EyeLevel ?
                    LocomotionEvent.TranslationType.AbsoluteEyeLevel
                    : LocomotionEvent.TranslationType.Absolute,
                interactable.FaceTargetDirection ?
                    LocomotionEvent.RotationType.Absolute
                    : LocomotionEvent.RotationType.None);
            _whenLocomotionPerformed.Invoke(locomotionEvent);
        }

        protected override TeleportInteractable ComputeCandidate()
        {
            var interactables = TeleportInteractable.Registry.List(this);
            return _computeCandidate.Invoke(TeleportArc, interactables,
                _computeCandidateTiebreaker, out _arcEnd);
        }

        protected override int ComputeCandidateTiebreaker(TeleportInteractable a, TeleportInteractable b)
        {
            int result = base.ComputeCandidateTiebreaker(a, b);
            if (result != 0)
            {
                return result;
            }
            return a.TieBreakerScore.CompareTo(b.TieBreakerScore);
        }

        #region Inject

        /// <summary>
        /// Injects all required dependencies for a dynamically instantiated TeleportInteractor; effectively wraps
        /// <see cref="InjectSelector(ISelector)"/>, since all other dependencies are optional. This method exists to support
        /// Interaction SDK's dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectAllTeleportInteractor(ISelector selector)
        {
            InjectSelector(selector);
        }

        /// <summary>
        /// Sets an <see cref="ISelector"/> for a dynamically instantiated TeleportInteractor. This method exists to support Interaction SDK's
        /// dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectSelector(ISelector selector)
        {
            _selector = selector as UnityEngine.Object;
            Selector = selector;
        }

        /// <summary>
        /// Obsolete method: provide a <see cref="ComputeCandidateDelegate"/> instead.
        ///
        /// Sets an <see cref="IHmd"/> for a dynamically instantiated TeleportInteractor. This method exists to support Interaction SDK's
        /// dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        [Obsolete("This property is no longer in use, create a " +
            nameof(ComputeCandidateDelegate) + " if you need custom candidate computing logic")]
        public void InjectOptionalHmd(IHmd hmd)
        {
            _hmd = hmd as UnityEngine.Object;
            Hmd = hmd;
        }

        /// <summary>
        /// Sets the <see cref="IPolyline"/> teleport arc for a dynamically instantiated TeleportInteractor. This method exists to support Interaction SDK's
        /// dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectOptionalTeleportArc(IPolyline teleportArc)
        {
            _teleportArc = teleportArc as UnityEngine.Object;
            TeleportArc = teleportArc;
        }

        /// <summary>
        /// Sets a custom strategy for computing the best teleport candidate for a dynamically instantiated TeleportInteractor. This method exists to
        /// support Interaction SDK's dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectOptionalCandidateComputer(ComputeCandidateDelegate candidateComputer)
        {
            _computeCandidate = candidateComputer;
        }
        #endregion
    }
}
