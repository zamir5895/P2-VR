/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Oculus.Interaction.Grab;
using Oculus.Interaction.GrabAPI;
using Oculus.Interaction.Input;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Oculus.Interaction.HandGrab
{
    /// <summary>
    /// The DistanceHandGrabInteractable allows grabbing the marked object from far away. Internally it uses
    /// <see cref="HandGrabPose"/>s to specify not only the poses of the hands but the required gestures to perform the grab. It is
    /// recommended to reuse the same <see cref="HandGrabPose"/>s used by the <see cref="HandGrabInteractable"/>, and even select just
    /// a few so they become the default poses when distant grabbing.
    /// </summary>
    [Serializable]
    public class DistanceHandGrabInteractable : PointerInteractable<DistanceHandGrabInteractor, DistanceHandGrabInteractable>,
        IHandGrabInteractable, IRigidbodyRef, ICollidersRef
    {
        [SerializeField]
        private Rigidbody _rigidbody;

        /// <summary>
        /// The Unity Rigidbody used for collision detection. The returned value is from the _rigidbody field, which is set from the
        /// Unity Editor.
        /// </summary>
        public Rigidbody Rigidbody => _rigidbody;

        [SerializeField, Optional(OptionalAttribute.Flag.Obsolete)]
        [Obsolete("Use " + nameof(Grabbable) + " and/or " + nameof(RigidbodyKinematicLocker) + " instead")]
        private PhysicsGrabbable _physicsGrabbable = null;

        [SerializeField]
        private bool _resetGrabOnGrabsUpdated = true;

        /// <summary>
        /// Related to <see cref="GrabInteractable.ResetGrabOnGrabsUpdated"/>; forces a release on all other grabbing interactors when
        /// grabbed by a new interactor.
        /// </summary>
        public bool ResetGrabOnGrabsUpdated
        {
            get
            {
                return _resetGrabOnGrabsUpdated;
            }
            set
            {
                _resetGrabOnGrabsUpdated = value;
            }
        }

        [Space]
        /// <summary>
        /// Defines the slippiness threshold so the interactor can slide along the interactable based on the
        /// strength of the grip. GrabSurfaces are required to slide. At min slippiness = 0, the interactor never moves.
        /// </summary>
        [SerializeField, Optional, Range(0f, 1f)]
        [Tooltip("Defines the slippiness threshold so the interactor can slide along the interactable based on the" +
            "strength of the grip. GrabSurfaces are required to slide. At min slippiness = 0, the interactor never moves.")]
        private float _slippiness = 0f;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.Slippiness"/>; for details, please refer to the related documentation
        /// provided for that interface.
        /// </summary>
        public float Slippiness
        {
            get
            {
                return _slippiness;
            }
            set
            {
                _slippiness = value;
            }
        }

        [Space]
        /// <summary>
        /// The available grab types dictates the available gestures for grabbing
        /// this interactable.
        /// </summary>
        [SerializeField]
        private GrabTypeFlags _supportedGrabTypes = GrabTypeFlags.Pinch;
        [SerializeField]
        private GrabbingRule _pinchGrabRules = GrabbingRule.DefaultPinchRule;
        [SerializeField]
        private GrabbingRule _palmGrabRules = GrabbingRule.DefaultPalmRule;

        /// <summary>
        /// The movement provider specifies how the selected interactable will
        /// align with the grabber.
        /// </summary>
        [SerializeField, Interface(typeof(IMovementProvider))]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        private UnityEngine.Object _movementProvider;

        /// <summary>
        /// The <see cref="IMovementProvider"/> used to move this interactable. This value is populated during the MonoBehaviour's
        /// start-up process from the _movementProvider field, which is set from the Unity Editor. Manually specifying this value
        /// is optional; if none is provided, a <see cref="MoveTowardsTargetProvider"/> will be created during start-up for this role.
        /// </summary>
        public IMovementProvider MovementProvider { get; set; }

        [SerializeField]
        private HandAlignType _handAligment = HandAlignType.AlignOnGrab;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.HandAlignment"/>; for details, please refer to the related
        /// documentation provided for that interface.
        /// </summary>
        public HandAlignType HandAlignment
        {
            get
            {
                return _handAligment;
            }
            set
            {
                _handAligment = value;
            }
        }

        [SerializeField]
        [Optional(OptionalAttribute.Flag.DontHide)]
        [UnityEngine.Serialization.FormerlySerializedAs("_handGrabPoints")]
        private List<HandGrabPose> _handGrabPoses = new List<HandGrabPose>();

        /// <summary>
        /// Implementation of <see cref="IRelativeToRef.RelativeTo"/>; for details, please refer to the related documentation provided
        /// for that interface.
        /// </summary>
        public Transform RelativeTo => _rigidbody.transform;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.SupportedGrabTypes"/>; for details, please refer to the related
        /// documentation provided for that interface.
        /// </summary>
        public GrabTypeFlags SupportedGrabTypes => _supportedGrabTypes;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.PinchGrabRules"/>; for details, please refer to the related documentation
        /// provided for that interface.
        /// </summary>
        public GrabbingRule PinchGrabRules => _pinchGrabRules;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.PalmGrabRules"/>; for details, please refer to the related documentation
        /// provided for that interface.
        /// </summary>
        public GrabbingRule PalmGrabRules => _palmGrabRules;

        /// <summary>
        /// Retrieves the list of <see cref="HandGrabPose"/>s which can be used to grab this interactable. This returns the value of the
        /// _handGrabPoses field, which is typically set from the Unity Editor.
        /// </summary>
        public List<HandGrabPose> HandGrabPoses => _handGrabPoses;

        /// <summary>
        /// The list of Unity Colliders associated with this interactable. This list is automatically populated during the
        /// MonoBehaviour's start-up process and will contain a reference to every Collider in <see cref="Rigidbody"/>'s hierarchy
        /// at that time. This list is not allowed to be empty, meaning there must be at least one Collider in
        /// <see cref="Rigidbody"/>'s hierarchy at the time the DistanceHandGrabInteractable first becomes active.
        /// </summary>
        public Collider[] Colliders { get; private set; }

        private GrabPoseFinder _grabPoseFinder;

        private readonly PoseMeasureParameters SCORE_MODIFIER = new PoseMeasureParameters(1f);

        #region editor events
        protected virtual void Reset()
        {
            if (this.TryGetComponent(out HandGrabInteractable handGrabInteractable))
            {
                InjectAllDistanceHandGrabInteractable(handGrabInteractable.SupportedGrabTypes,
                    handGrabInteractable.Rigidbody,
                    handGrabInteractable.PinchGrabRules, handGrabInteractable.PalmGrabRules);
                InjectOptionalHandGrabPoses(new List<HandGrabPose>(handGrabInteractable.HandGrabPoses));
                InjectOptionalPointableElement(handGrabInteractable.PointableElement);
            }
            else
            {
                InjectRigidbody(this.GetComponentInParent<Rigidbody>());
                InjectOptionalPointableElement(this.GetComponentInParent<Grabbable>());
            }
        }
        #endregion

        protected override void Awake()
        {
            base.Awake();
            MovementProvider = _movementProvider as IMovementProvider;
        }

        protected override void Start()
        {
            this.BeginStart(ref _started, () => base.Start());
            this.AssertField(Rigidbody, nameof(Rigidbody));
            Colliders = Rigidbody.GetComponentsInChildren<Collider>();
            this.AssertCollectionField(Colliders, nameof(Colliders),
                whyItFailed: $"The associated {nameof(Rigidbody)} must have at least one collider.");

            if (MovementProvider == null)
            {
                MoveTowardsTargetProvider movementProvider = this.gameObject.AddComponent<MoveTowardsTargetProvider>();
                InjectOptionalMovementProvider(movementProvider);
            }
            _grabPoseFinder = new GrabPoseFinder(_handGrabPoses, this.RelativeTo);
            this.EndStart(ref _started);
        }

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.GenerateMovement(in Pose, in Pose)"/>; for details, please refer to the
        /// related documentation provided for that interface.
        /// </summary>
        public IMovement GenerateMovement(in Pose from, in Pose to)
        {
            IMovement movement = MovementProvider.CreateMovement();
            movement.StopAndSetPose(from);
            movement.MoveTo(to);
            return movement;
        }

        /// <summary>
        /// Obsolete: this was used to apply velocities from an <see cref="Throw.IThrowVelocityCalculator"/>, which is deprecated.
        /// Velocity calculation capabilities are now a feature of <see cref="Grabbable"/> and should be controlled from there.
        /// </summary>
        [Obsolete("Use " + nameof(Grabbable) + " instead")]
        public void ApplyVelocities(Vector3 linearVelocity, Vector3 angularVelocity)
        {
            if (_physicsGrabbable == null)
            {
                return;
            }
            _physicsGrabbable.ApplyVelocities(linearVelocity, angularVelocity);
        }

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.CalculateBestPose(Pose, float, Handedness, ref HandGrabResult)"/>;
        /// for details, please refer to the related documentation provided for that interface.
        /// </summary>
        public bool CalculateBestPose(Pose userPose, float handScale, Handedness handedness,
            ref HandGrabResult result)
        {
            CalculateBestPose(userPose, Pose.identity, RelativeTo, handScale, handedness, ref result);
            return true;
        }

        /// <summary>
        /// Implementation of
        /// <see cref="IHandGrabInteractable.CalculateBestPose(in Pose, in Pose, Transform, float, Handedness, ref HandGrabResult)"/>;
        /// for details, please refer to the related documentation provided for that interface.
        /// </summary>
        public void CalculateBestPose(in Pose userPose, in Pose offset, Transform relativeTo,
            float handScale, Handedness handedness,
            ref HandGrabResult result)
        {
            bool poseFound = _grabPoseFinder.FindBestPose(userPose, offset,
                handScale, handedness, SCORE_MODIFIER,
                ref result);

            if (!poseFound)
            {
                Pose targetPose = PoseUtils.Multiply(userPose, offset);
                result.HasHandPose = false;
                result.Score = new GrabPoseScore(targetPose.position, this.transform.position);
                result.RelativePose = new Pose(RelativeTo.Delta(this.transform).position, Quaternion.Inverse(RelativeTo.rotation) * targetPose.rotation);
            }
        }

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.UsesHandPose"/>; for details, please refer to the related documentation
        /// provided for that interface.
        /// </summary>
        public bool UsesHandPose => _grabPoseFinder.UsesHandPose;

        /// <summary>
        /// Implementation of <see cref="IHandGrabInteractable.SupportsHandedness(Handedness)"/>; for details, please refer to the
        /// related documentation provided for that interface.
        /// </summary>
        public bool SupportsHandedness(Handedness handedness)
        {
            return _grabPoseFinder.SupportsHandedness(handedness);
        }

        #region Inject
        /// <summary>
        /// Convenience method combining <see cref="InjectSupportedGrabTypes(GrabTypeFlags)"/>,
        /// <see cref="InjectRigidbody(Rigidbody)"/>, <see cref="InjectPinchGrabRules(GrabbingRule)"/>, and
        /// <see cref="InjectPalmGrabRules(GrabbingRule)"/>. This method exists to support Interaction SDK's dependency injection
        /// pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectAllDistanceHandGrabInteractable(GrabTypeFlags supportedGrabTypes,
            Rigidbody rigidbody,
            GrabbingRule pinchGrabRules, GrabbingRule palmGrabRules)
        {
            InjectSupportedGrabTypes(supportedGrabTypes);
            InjectRigidbody(rigidbody);
            InjectPinchGrabRules(pinchGrabRules);
            InjectPalmGrabRules(palmGrabRules);
        }

        /// <summary>
        /// Obsolete: adds a <see cref="PhysicsGrabbable"/> to a dynamically instantiated GameObject. This functionality is now
        /// provided as part of <see cref="Grabbable"/> and no longer needs to be handled independently. This method exists to support
        /// Interaction SDK's dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        [Obsolete("Use " + nameof(Grabbable) + " instead")]
        public void InjectOptionalPhysicsGrabbable(PhysicsGrabbable physicsObject)
        {
            _physicsGrabbable = physicsObject;
        }

        /// <summary>
        /// Adds a <see cref="GrabTypeFlags"/> as <see cref="SupportedGrabTypes"/> in a dynamically instantiated
        /// DistanceHandGrabInteractable. This method exists to support Interaction SDK's dependency injection pattern and is not
        /// needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectSupportedGrabTypes(GrabTypeFlags supportedGrabTypes)
        {
            _supportedGrabTypes = supportedGrabTypes;
        }

        /// <summary>
        /// Adds a <see cref="GrabbingRule"/> as <see cref="PinchGrabRules"/> to a dynamically instantiated
        /// DistanceHandGrabInteractable. This method exists to support Interaction SDK's dependency injection pattern and is not
        /// needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectPinchGrabRules(GrabbingRule pinchGrabRules)
        {
            _pinchGrabRules = pinchGrabRules;
        }

        /// <summary>
        /// Adds a <see cref="GrabbingRule"/> as <see cref="PalmGrabRules"/> to a dynamically instantiated
        /// DistanceHandGrabInteractable. This method exists to support Interaction SDK's dependency injection pattern and is not
        /// needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectPalmGrabRules(GrabbingRule palmGrabRules)
        {
            _palmGrabRules = palmGrabRules;
        }

        /// <summary>
        /// Adds a Unity Rigidbody as <see cref="Rigidbody"/> to a dynamically instantiated DistanceHandGrabInteractable. This method
        /// exists to support Interaction SDK's dependency injection pattern and is not needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectRigidbody(Rigidbody rigidbody)
        {
            _rigidbody = rigidbody;
        }

        /// <summary>
        /// Adds a list of <see cref="DistanceHandGrabInteractor"/> as <see cref="HandGrabPoses"/> to a dynamically instantiated
        /// DistanceHandGrabInteractable. This method exists to support Interaction SDK's dependency injection pattern and is not
        /// needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectOptionalHandGrabPoses(List<HandGrabPose> handGrabPoses)
        {
            _handGrabPoses = handGrabPoses;
        }

        /// <summary>
        /// Adds an <see cref="IMovementProvider"/> as <see cref="MovementProvider"/> to a dynamically instantiated
        /// DistanceHandGrabInteractable. This method exists to support Interaction SDK's dependency injection pattern and is not
        /// needed for typical Unity Editor-based usage.
        /// </summary>
        public void InjectOptionalMovementProvider(IMovementProvider provider)
        {
            _movementProvider = provider as UnityEngine.Object;
            MovementProvider = provider;
        }
        #endregion
    }
}
